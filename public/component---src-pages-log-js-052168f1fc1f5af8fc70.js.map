{"version":3,"file":"component---src-pages-log-js-052168f1fc1f5af8fc70.js","mappings":"4LAkBEA,E,MAZkBC,GAAAA,gBAAqB,CACvCC,UAAW,SAACC,GAAD,MAAc,CACvBC,QAASD,EAAQE,MAAM,CACrBA,MAAO,kBAAwB,CAC7BC,OAAQ,MACRC,IAAI,gBAFC,EAAGC,QAEL,SAFE,EAAYC,KAAZ,IAFA,IAWXT,gB,QCbIU,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAClB,GAAwBC,EAAAA,EAAAA,WAAS,GAA1BC,EAAP,KAAaC,EAAb,KAEA,OACE,2BACE,4BACCC,EAAAA,EAAAA,GAAO,IAAIC,KAAKL,EAAKM,WAAY,kBAClC,0BAAKN,EAAKO,SACV,gBAACC,EAAA,EAAD,CAAQC,QAAQ,SAASC,MAAO,CAACC,QAAS,GAAIC,QAAS,kBAAMT,GAAQ,SAAAU,GAAI,OAAKA,CAAL,GAAlB,GAA+BX,EAAO,YAAc,aAC1GA,EAAO,2BAAMY,KAAKC,UAAUf,EAAKA,KAAM,KAAM,IAAY,KAC1D,2BAGL,EAkCD,EAhCY,WAAO,IAAD,EAChB,GAAwBC,EAAAA,EAAAA,UAAS,GAA1BH,EAAP,KAAakB,EAAb,KACOnB,GAAWI,EAAAA,EAAAA,UAAS,KAA3B,GAEA,EAGIZ,EAAgB,CAClBS,KAAAA,EACAD,QAAAA,GACC,CACDoB,2BAA2B,IAN3BjB,EADF,EACEA,KASF,OAVA,EAEEkB,UASO,yCAGJlB,EAKH,2BACGA,SADH,UACGA,EAAMA,YADT,aACG,EAAYmB,KAAI,SAAAC,GAAQ,OAAI,gBAACrB,EAAD,CAAUsB,IAAKD,EAASE,IAAKtB,KAAMoB,GAAvC,IACzB,2BAAM,2BACLtB,EAAO,EAAI,gBAACU,EAAA,EAAD,CAAQI,QAAS,kBAAMI,GAAQ,SAAAH,GAAI,OAAIA,EAAO,CAAX,GAAlB,GAAjB,SAAmE,KAAM,IACpFb,EAAKA,KAAKuB,QAAU1B,EAAU,gBAACW,EAAA,EAAD,CAAQI,QAAS,kBAAMI,GAAQ,SAAAH,GAAI,OAAIA,EAAO,CAAX,GAAlB,GAAjB,SAAmE,MAR7F,yCAWV,C","sources":["webpack://bankehuset/./src/services/logs.js","webpack://bankehuset/./src/pages/log.js"],"sourcesContent":["/**\n* Services -> Logs\n */\n\nimport base from './base';\n\nconst logsService = base.injectEndpoints({\n  endpoints: (builder) => ({\n    getLogs: builder.query({\n      query: ({ perPage, page }) => ({\n        method: 'GET',\n        url: `logs?perPage=${perPage}&page=${page}`,\n      })\n    })\n  })\n})\n\nexport const {\n  useGetLogsQuery\n} = logsService;","import React, { useState } from 'react';\nimport { Button } from '@mantine/core';\nimport { useGetLogsQuery } from '../services/logs';\nimport { format } from 'date-fns';\n\nconst LogEntry = ({ data }) => {\n  const [show, setShow] = useState(false);\n\n  return (\n    <div>\n      <br />\n      {format(new Date(data.createdAt), 'dd/MM/yyyy h:m')}\n      <h3>{data.message}</h3>\n      <Button variant=\"subtle\" style={{padding: 0}} onClick={() => setShow(curr => !curr)}>{show ? 'Hide data' : 'Show data'}</Button>\n      {show ? <pre>{JSON.stringify(data.data, null, 4)}</pre> : null}\n      <hr />\n    </div>\n  )\n}\n\nconst Log = () => {\n  const [page, setPage] = useState(1);\n  const [perPage] = useState(200);\n\n  const {\n    data,\n    isLoading\n  } = useGetLogsQuery({\n    page,\n    perPage,\n  }, {\n    refetchOnMountOrArgChange: true\n  });\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!data) {\n    return <div>No data yet</div>\n  }\n\n  return (\n    <div>\n      {data?.data?.map(logEntry => <LogEntry key={logEntry._id} data={logEntry} />)}\n      <br /><br />\n      {page > 1 ? <Button onClick={() => setPage(curr => curr - 1)}>Newer</Button> : null}{' '}\n      {data.data.length >= perPage ? <Button onClick={() => setPage(curr => curr + 1)}>Older</Button> : null}\n    </div>\n  )\n}\n\nexport default Log;\n"],"names":["useGetLogsQuery","base","endpoints","builder","getLogs","query","method","url","perPage","page","LogEntry","data","useState","show","setShow","format","Date","createdAt","message","Button","variant","style","padding","onClick","curr","JSON","stringify","setPage","refetchOnMountOrArgChange","isLoading","map","logEntry","key","_id","length"],"sourceRoot":""}